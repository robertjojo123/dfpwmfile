

-- Blocks to be skipped
local skipBlocks = {
    ["minecraft:blue_orchid"] = true,
    ["minecraft:dandelion"] = true,
    ["minecraft:double_tallgrass"] = true,
    ["minecraft:fern"] = true,
    ["minecraft:grass"] = true, -- The flower version, not the block
    ["minecraft:large_fern"] = true,
    ["minecraft:oxeye_daisy"] = true,
    ["minecraft:poppy"] = true,
    ["minecraft:pink_tulip"] = true,
    ["minecraft:snow"] = true,
    ["minecraft:sunflower"] = true,
    ["minecraft:water"] = true
}

-- Material Chest Locations (Relative to Start)
local materialChests = {
    ["minecraft:clay"] = {x = -1, y = 0, z = 0},
    ["minecraft:dirt"] = {x = -2, y = 0, z = 0},
    ["minecraft:grass_block"] = {x = -3, y = 0, z = 0},
    ["minecraft:oak_leaves"] = {x = -4, y = 0, z = 0},
    ["minecraft:oak_wood"] = {x = -5, y = 0, z = 0},
    ["minecraft:pillar_quartz_block"] = {x = -6, y = 0, z = 0},
    ["minecraft:stone"] = {x = -7, y = 0, z = 0},
    ["minecraft:stone_brick_stairs"] = {x = -8, y = 0, z = 0},
    ["minecraft:stone_bricks"] = {x = -9, y = 0, z = 0},
    ["minecraft:stone_slab"] = {x = -10, y = 0, z = 0},
    ["minecraft:white_wool"] = {x = -11, y = 0, z = 0}
}

local function moveForward()
    if tryMove(turtle.forward, turtle.detect, turtle.attack, true) then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
    end
end

local function moveTo(target)
    while pos.x ~= target.x do
        if pos.x < target.x then
            while pos.dir ~= 1 do turnRight() end
        else
            while pos.dir ~= 3 do turnRight() end
        end
        moveForward()
    end
    
    while pos.z ~= target.z do
        if pos.z < target.z then
            while pos.dir ~= 0 do turnRight() end
        else
            while pos.dir ~= 2 do turnRight() end
        end
        moveForward()
    end
end

local function savePosition()
    lastPos.x = pos.x
    lastPos.y = pos.y
    lastPos.z = pos.z
    lastPos.dir = pos.dir
end

local function returnToLastPosition()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- Restock Function (Now Moves to the Correct Chest for Each Material)
local function restock(block)
    if skipBlocks["minecraft:" .. block] then
        print("Skipping restock for: " .. block)
        return false
    end

    local chestPos = materialChests["minecraft:" .. block]
    if not chestPos then
        print("No chest assigned for: " .. block)
        return false
    end

    print("Restocking: " .. block)
    savePosition()
    moveTo(chestPos)  -- Move to the correct material chest
    while pos.dir ~= 3 do turnLeft() end -- Face the chest

    for chestSlot = 1, 16 do
        turtle.select(chestSlot)
        local itemDetail = turtle.getItemDetail()
        if not itemDetail then
            turtle.select(chestSlot)
            for i = 1, 27 do -- Cycle through chest slots
                if turtle.suck(64) then
                    local suckedItem = turtle.getItemDetail()
                    if suckedItem and suckedItem.name == "minecraft:" .. block then
                        print("✅ Restocked " .. block)
                        returnToLastPosition()
                        return true
                    else
                        turtle.drop() -- Drop unwanted items back into chest
                    end
                end
            end
        end
    end
    
    print("❌ Out of stock in chest for: " .. block)
    return false
end

-- Place Block Function (Restocks if Completely Out, Skips Certain Blocks)
local function placeBlock(block)
    -- Check if block should be skipped
    if skipBlocks["minecraft:"..block] then
        print("Skipping block: "..block)
        return true -- Skip and move to the next block
    end

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:"..block then
            turtle.select(i)
            turtle.placeDown()
            return true
        end
    end
    
    -- If out of block, restock
    if restock(block) then
        return placeBlock(block)
    else
        print("❌ Build halted: Out of " .. block)
        return false
    end
end

-- Build Schematic (Now Skips Unwanted Blocks)
local function buildSchematic()
    for _, blockData in ipairs(schematic) do
        local target = {x = blockData.x, y = blockData.y, z = blockData.z}

        -- Skip placing if block is in skip list
        if skipBlocks["minecraft:" .. blockData.block] then
            print("⏩ Skipping block: " .. blockData.block)
        else
            moveTo(target)
            if not placeBlock(blockData.block) then
                print("❌ Unable to place block at (" .. blockData.x .. ", " .. blockData.y .. ", " .. blockData.z .. ")")
                return
            end
        end
    end
    print("✅ Schematic completed.")
end

buildSchematic()
