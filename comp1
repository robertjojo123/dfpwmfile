-- UpdatedComp1RealTime5FPS.lua
local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")

local videoFile = "/video1.nfv"  -- The video file for the first computer
local fpsTarget = 5  -- Target FPS (5 frames per second)
local frameDuration = 1 / fpsTarget  -- Duration of each frame (0.2 seconds)

-- Function to load video data from a file
local function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end

    -- Get resolution and fps from the first line
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    local fps = tonumber(videoData[1]:match("%d+ %d+ (%d+)"))
    table.remove(videoData, 1)  -- Remove the first line, which is metadata

    return videoData, resolution, fps
end

-- Function to display the next frame at 5 FPS in real time
local function nextFrame(videoData, resolution, frameIndex)
    local frame = {}
    for i = 1, resolution[2] do
        if frameIndex + i > #videoData then
            return false, frameIndex  -- End of video, return false to stop
        end
        table.insert(frame, videoData[frameIndex + i])
    end
    local parsedFrame = paintutils.parseImage(table.concat(frame, "\n"))
    frameIndex = frameIndex + resolution[2]
    paintutils.drawImage(parsedFrame, 1, 1)

    -- Real-Time Frame Timing
    local startTime = os.clock()
    while (os.clock() - startTime) < frameDuration do
        os.sleep(0.01)  -- Small sleep to reduce CPU usage
    end

    return true, frameIndex  -- Continue playing
end

-- Function to play the video file at 5 FPS in real time
local function playVideo(videoFile)
    local videoData, resolution = loadVideo(videoFile)
    local frameIndex = 2  -- Start reading video data from the second line (skip metadata)

    while true do
        local success
        success, frameIndex = nextFrame(videoData, resolution, frameIndex)
        
        -- If we reach the end of the video, return to the beginning
        if not success then
            return  -- Exit the loop, signaling the end of the video
        end
    end
end

-- Set up the monitor and redirect the output
monitor.setTextScale(1)
term.redirect(monitor)

-- Open modem on channel 100
modem.open(100)

while true do
    -- Play the video on this computer at 5 FPS
    playVideo(videoFile)

    -- Send a signal to the second computer to start its video after finishing
    modem.transmit(100, 2, "start_video_2")  -- Signal the second computer to start its video
    print("Video finished, sent signal to start second computer's video.")
    
    -- Wait for a signal from Computer 7 to restart the cycle
    local _, _, _, _, message = os.pullEvent("modem_message")
    if message == "restart_cycle" then
        print("Received signal to restart the cycle.")
    end
end
