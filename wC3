import nbtlib 
import os
import numpy as np
import time
from collections import defaultdict

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 30000  # Max blocks per Lua file
unknown_blocks_count = defaultdict(int)

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        # Standard Blocks
        (0, 0): "'air'",
        (1, 0): "'stone'", (1, 1): "'granite'", (1, 2): "'polished_granite'",
        (1, 3): "'diorite'", (1, 4): "'polished_diorite'", (1, 5): "'andesite'", (1, 6): "'polished_andesite'",
        (2, 0): "'grass_block'", (3, 0): "'dirt'", (3, 1): "'coarse_dirt'", (3, 2): "'podzol'",
        (4, 0): "'cobblestone'", (12, 0): "'sand'", (12, 1): "'red_sand'", (13, 0): "'gravel'",
        (45, 0): "'bricks'", (48, 0): "'moss_stone'", (89, 0): "'glowstone'",
        (87, 0): "'netherrack'",
        (41, 0): "'gold_block'",
        (85, 0): "'oak_fence'",
        (139, 0): "'cobblestone_wall'",
        (152, 0): "'redstone_block'"
    }

    ignored_block_ids = {9, 31, 37, 38, 51, 69, 78, 80, 106, 111, 175}

    # Keeping all previous elif statements and adding new fixes
    if block_id == 5:
        return "'oak_planks'"
    elif block_id == 17:
        return "'oak_wood'"
    elif block_id == 18:
        return "'oak_leaves'"
    elif block_id == 35 and data_value == 0:
        return "'white_wool'"
    elif block_id == 35 and data_value == 8:
        return "'light_gray_wool'"
    elif block_id == 35 and data_value == 15:
        return "'black_wool'"
    elif block_id == 43 and data_value == 0:
        return "'stone_double_slab'"
    elif block_id == 43 and data_value == 1:
        return "'double_sandstone_slab'"
    elif block_id == 43 and data_value == 4:
        return "'double_brick_slab'"
    elif block_id == 43 and data_value == 5:
        return "'double_stone_brick_slab'"
    elif block_id == 43 and data_value == 7:
        return "'double_quartz_slab'"
    elif block_id == 43 and data_value == 8:
        return "'double_smooth_stone_slab'"
    elif block_id == 43 and data_value == 9:
        return "'smooth_sandstone_double_slab'"
    elif block_id == 44 and data_value == 0:
        return "'stone_slab'"
    elif block_id == 44 and data_value == 4:
        return "'brick_slab'"
    elif block_id == 44 and data_value == 5:
        return "'stone_brick_slab'"
    elif block_id == 44 and data_value == 7:
        return "'quartz_slab'"
    elif block_id == 44 and data_value >= 8:
        return get_block_name(44, data_value - 7)  # Fix slabs automatically
    elif block_id == 67:
        return "'cobblestone_stairs'"
    elif block_id == 98 and data_value == 0:
        return "'stone_bricks'"
    elif block_id == 98 and data_value == 1:
        return "'mossy_stone_bricks'"
    elif block_id == 98 and data_value == 2:
        return "'cracked_stone_bricks'"
    elif block_id == 98 and data_value == 3:
        return "'chiseled_stone_bricks'"
    elif block_id == 109:
        return "'stone_brick_stairs'"
    elif block_id == 124:
        return "'redstone_lamp'"
    elif block_id == 125:
        return "'double_oak_wood_slab'"
    elif block_id == 126:
        return "'spruce_wood_slab'"
    elif block_id == 128:
        return "'sandstone_stairs'"
    elif block_id == 134:
        return "'spruce_stairs'"
    elif block_id == 138:
        return "'beacon'"
    elif block_id == 155:
        return "'quartz_block'"
    elif block_id == 156:
        return "'quartz_stairs'"

    block_name = block_names.get((block_id, data_value))
    if block_name is None and block_id not in ignored_block_ids:
        unknown_blocks_count[(block_id, data_value)] += 1
        return f"'unknown ({block_id}:{data_value})'"
    return block_name

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"❌ File not found: {filename}")
        return None, None, None, None

    print("📂 Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    print(f"✅ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    structured_chunks = {}
    block_count = 0
    file_index = 1
    output_data = []

    for chunk_x in range(0, width, MINECRAFT_CHUNK_SIZE):
        for chunk_z in range(0, length, MINECRAFT_CHUNK_SIZE):
            chunk_key = (chunk_x, chunk_z)
            structured_chunks[chunk_key] = []

            for y in range(height):
                for x in range(chunk_x, min(chunk_x + MINECRAFT_CHUNK_SIZE, width)):
                    for z in range(chunk_z, min(chunk_z + MINECRAFT_CHUNK_SIZE, length)):
                        i = y * width * length + z * width + x
                        block_id = int(blocks[i])
                        data_value = int(data_values[i])
                        if block_id != 0:
                            formatted_entry = f"{{x={x}, y={y}, z={z}, {get_block_name(block_id, data_value)}}}"
                            structured_chunks[chunk_key].append(formatted_entry)
                            output_data.append(formatted_entry)
                            block_count += 1

                            if block_count >= MAX_BLOCKS_PER_FILE:
                                with open(f"output_{file_index}.lua", "w") as f:
                                    f.write("return {\n" + ",\n".join(output_data) + "\n}")
                                print(f"✅ Saved output_{file_index}.lua with {block_count} blocks")
                                output_data = []
                                block_count = 0
                                file_index += 1

    if output_data:
        with open(f"output_{file_index}.lua", "w") as f:
            f.write("return {\n" + ",\n".join(output_data) + "\n}")
        print(f"✅ Saved final output_{file_index}.lua with {len(output_data)} blocks")

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    load_schematic(schematic_file)

if __name__ == "__main__":
    main()
