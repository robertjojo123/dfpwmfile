import nbtlib 
import os
import numpy as np
import time
from collections import defaultdict

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 25000  # Max blocks per Lua file
# Dictionary to track unknown blocks
unknown_blocks_count = defaultdict(int)

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        # Standard Blocks
        (0, 0): "'air'",
        (1, 0): "'stone'", (1, 1): "'granite'", (1, 2): "'polished_granite'",
        (1, 3): "'diorite'", (1, 4): "'polished_diorite'", (1, 5): "'andesite'", (1, 6): "'polished_andesite'",
        (2, 0): "'grass_block'", (3, 0): "'dirt'", (3, 1): "'coarse_dirt'", (3, 2): "'podzol'",
        (4, 0): "'cobblestone'", (12, 0): "'sand'", (12, 1): "'red_sand'", (13, 0): "'gravel'",
        (45, 0): "'bricks'", (48, 0): "'moss_stone'", (89, 0): "'glowstone'",
        (87, 0): "'netherrack'",

        # Packed Ice
        (174, 0): "'packed_ice'",

        # Clay Block
        (82, 0): "'clay_block'",

        # Sandstone Variants
        (24, 0): "'sandstone'", (24, 1): "'chiseled_sandstone'", (24, 2): "'smooth_sandstone'",
        (44, 1): "'sandstone_slab'",
        (179, 0): "'red_sandstone'", (179, 1): "'chiseled_red_sandstone'", (179, 2): "'smooth_red_sandstone'",
        (182, 0): "'red_sandstone_slab'",

        # Extra Blocks
        (41, 0): "'gold_block'",
        (85, 0): "'oak_fence'",
        (139, 0): "'cobblestone_wall'",
        (152, 0): "'redstone_block'"
    }

    ignored_block_ids = {9, 31, 37, 38, 51, 69, 78, 80, 106, 111, 175}

    # Keeping all the elif statements as they were!
    if block_id == 17:
        return "'oak_wood'"
    elif block_id == 18:
        return "'oak_leaves'"
    elif block_id == 44 and data_value >= 8:
        return block_names.get((44, data_value - 7), f"'unknown ({block_id}:{data_value})'")
    elif block_id == 67:
        return "'cobblestone_stairs'"
    elif block_id == 109:
        return "'stone_brick_stairs'"
    elif block_id == 124:
        return "'redstone_lamp'"
    elif block_id == 125:
        return "'double_oak_wood_slab'"
    elif block_id == 126:
        return "'spruce_wood_slab'"
    elif block_id == 128:
        return "'sandstone_stairs'"
    elif block_id == 134:
        return "'spruce_stairs'"
    elif block_id == 138:
        return "'beacon'"
    elif block_id == 155:
        return "'quartz_block'"
    elif block_id == 156:
        return "'quartz_stairs'"

    block_name = block_names.get((block_id, data_value))
    if block_name is None and block_id not in ignored_block_ids:
        unknown_blocks_count[(block_id, data_value)] += 1
        return f"'unknown ({block_id}:{data_value})'"
    return block_name

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        return None, None, None, None

    print("üìÇ Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    print(f"‚úÖ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    structured_chunks = {}
    block_count = 0
    file_index = 1
    output_data = []

    for y in range(height):
        for x in range(width):
            for z in range(length):
                i = y * width * length + z * width + x
                block_id = int(blocks[i])
                data_value = int(data_values[i])
                if block_id != 0:
                    formatted_entry = f"{{x={x}, y={y}, z={z}, {get_block_name(block_id, data_value)}}}"
                    output_data.append(formatted_entry)

    with open("output.lua", "w") as f:
        f.write("return {\n" + ",\n".join(output_data) + "\n}")
    print(f"‚úÖ Saved output.lua with {len(output_data)} blocks")

# Debug and Error Reporting
def print_unknown_blocks():
    if unknown_blocks_count:
        print("\n‚ö†Ô∏è  **Unknown Blocks Encountered** ‚ö†Ô∏è")
        for (block_id, data_value), count in sorted(unknown_blocks_count.items()):
            print(f"  - Unknown Block (ID: {block_id}, Data: {data_value}) occurred {count} times")
    else:
        print("\n‚úÖ No unknown blocks found!")

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    load_schematic(schematic_file)
    print_unknown_blocks()

if __name__ == "__main__":
    main()
