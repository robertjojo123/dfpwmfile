import nbtlib
import os
import numpy as np
import time
from collections import defaultdict

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 25000  # Max blocks per Lua file
unknown_blocks_count = defaultdict(int)  # Track unknown blocks

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        (1, 0): "stone", (1, 1): "granite", (1, 2): "polished_granite",
        (1, 3): "diorite", (1, 4): "polished_diorite", (1, 5): "andesite", (1, 6): "polished_andesite",
        (2, 0): "grass_block", (3, 0): "dirt", (3, 1): "coarse_dirt", (3, 2): "podzol",
        (4, 0): "cobblestone", (12, 0): "sand", (12, 1): "red_sand", (13, 0): "gravel",
        (45, 0): "bricks", (48, 0): "moss_stone", (89, 0): "glowstone", (87, 0): "netherrack",
        (174, 0): "packed_ice", (82, 0): "clay_block",
        (24, 0): "sandstone", (24, 1): "chiseled_sandstone", (24, 2): "smooth_sandstone",
        (179, 0): "red_sandstone", (179, 1): "chiseled_red_sandstone", (179, 2): "smooth_red_sandstone",
        (128, 0): "sandstone_stairs", (180, 0): "red_sandstone_stairs",
        (5, 0): "oak_planks", (5, 1): "spruce_planks", (5, 2): "birch_planks",
        (5, 3): "jungle_planks", (5, 4): "acacia_planks", (5, 5): "dark_oak_planks",
        (17, 0): "oak_wood", (18, 0): "oak_leaves",
        (35, 0): "white_wool", (35, 15): "black_wool",
        (98, 0): "stone_bricks", (98, 1): "mossy_stone_bricks",
        (98, 2): "cracked_stone_bricks", (98, 3): "chiseled_stone_bricks",
        (155, 0): "quartz_block", (155, 1): "chiseled_quartz_block",
        (155, 2): "pillar_quartz_block", (155, 3): "smooth_quartz_block",
        (156, 0): "quartz_stairs",
        (44, 0): "stone_slab", (44, 3): "cobblestone_slab",
        (44, 4): "brick_slab", (44, 5): "stone_brick_slab", (44, 6): "nether_brick_slab",
        (67, 0): "cobblestone_stairs", (109, 0): "stone_brick_stairs",
        (108, 0): "brick_stairs", (114, 0): "nether_brick_stairs",
        (124, 0): "redstone_lamp", (138, 0): "beacon",
        (41, 0): "gold_block", (85, 0): "oak_fence",
        (139, 0): "cobblestone_wall", (152, 0): "redstone_block"
    }

    # Fix known unknowns
    fixed_blocks = {
        17: "oak_wood", 18: "oak_leaves", 44: "stone_slab",
        67: "cobblestone_stairs", 109: "stone_brick_stairs",
        124: "redstone_lamp", 138: "beacon",
        155: "quartz_block", 156: "quartz_stairs",
        125: "double_oak_wood_slab", 126: "spruce_wood_slab",
        128: "sandstone_stairs", 134: "spruce_stairs"
    }

    # Blocks to ignore (no output)
    ignored_block_ids = {9, 31, 37, 38, 51, 69, 78, 80, 106, 111, 175}

    if block_id in ignored_block_ids:
        return None  # Ignore these blocks

    if block_id in fixed_blocks:
        return f"'{fixed_blocks[block_id]}'"  # Convert known unknowns

    block_name = block_names.get((block_id, data_value))

    if block_name:
        return f"'{block_name}'"  # Return with single quotes

    unknown_blocks_count[(block_id, data_value)] += 1
    return f"'unknown ({block_id}:{data_value})'"

# Process schematic
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        return None

    print("üìÇ Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    output_data = []
    block_count = 0
    file_index = 1

    print("\nüîÑ Processing blocks into 16x16 chunks...")

    for y in range(height):
        for x in range(width):
            for z in range(length):
                i = y * width * length + z * width + x
                block_id = int(blocks[i])
                data_value = int(data_values[i])
                block_name = get_block_name(block_id, data_value)

                if block_name:
                    formatted_entry = f"{{x={x}, y={y}, z={z}, {block_name}}}"
                    output_data.append(formatted_entry)
                    block_count += 1

                if block_count >= MAX_BLOCKS_PER_FILE:
                    with open(f"output_{file_index}.lua", "w") as f:
                        f.write("return {\n" + ",\n".join(output_data) + "\n}")
                    print(f"‚úÖ Saved output_{file_index}.lua with {block_count} blocks")
                    output_data.clear()
                    block_count = 0
                    file_index += 1

    # Ensure final output is written
    if output_data:
        with open(f"output_{file_index}.lua", "w") as f:
            f.write("return {\n" + ",\n".join(output_data) + "\n}")
        print(f"‚úÖ Saved final output_{file_index}.lua with {len(output_data)} blocks")

    return True

# Report unknown blocks
def print_unknown_blocks():
    if unknown_blocks_count:
        print("\n‚ö†Ô∏è **Unknown Blocks Encountered** ‚ö†Ô∏è")
        for (block_id, data_value), count in sorted(unknown_blocks_count.items()):
            print(f"  - Unknown Block (ID: {block_id}, Data: {data_value}) occurred {count} times")
    else:
        print("\n‚úÖ No unknown blocks found!")

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    success = load_schematic(schematic_file)

    if success:
        print("\n‚úÖ Conversion complete!")
        print_unknown_blocks()
    else:
        print("‚ùå No valid chunks found. Exiting.")

if __name__ == "__main__":
    main()
