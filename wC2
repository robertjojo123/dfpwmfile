import nbtlib 
import os
import numpy as np
import time

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 25000  # Max blocks per Lua file
unknown_blocks_set = set()  # Track unknown blocks

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        # Basic Blocks
        (0, 0): "air",
        (1, 0): "stone", (1, 1): "granite", (1, 2): "polished_granite",
        (1, 3): "diorite", (1, 4): "polished_diorite", (1, 5): "andesite", (1, 6): "polished_andesite",
        (2, 0): "grass_block", (3, 0): "dirt", (3, 1): "coarse_dirt", (3, 2): "podzol",
        (4, 0): "cobblestone", (12, 0): "sand", (12, 1): "red_sand", (13, 0): "gravel",

        # Wood Planks
        (5, 0): "oak_planks", (5, 1): "spruce_planks", (5, 2): "birch_planks",
        (5, 3): "jungle_planks", (5, 4): "acacia_planks", (5, 5): "dark_oak_planks",

        # Wood Logs
        (17, 0): "oak_wood", (17, 1): "spruce_wood", (17, 2): "birch_wood", (17, 3): "jungle_wood",

        # Leaves
        (18, 0): "oak_leaves", (18, 3): "jungle_leaves",

        # Wool Colors
        (35, 0): "white_wool", (35, 1): "orange_wool", (35, 2): "magenta_wool",
        (35, 3): "light_blue_wool", (35, 4): "yellow_wool", (35, 5): "lime_wool",
        (35, 6): "pink_wool", (35, 7): "gray_wool", (35, 8): "light_gray_wool",
        (35, 9): "cyan_wool", (35, 10): "purple_wool", (35, 11): "blue_wool",
        (35, 12): "brown_wool", (35, 13): "green_wool", (35, 14): "red_wool", (35, 15): "black_wool",

        # Sandstone Variants
        (24, 0): "sandstone", (24, 1): "chiseled_sandstone", (24, 2): "smooth_sandstone",

        # Stone Bricks
        (98, 0): "stone_bricks", (98, 1): "mossy_stone_bricks",
        (98, 2): "cracked_stone_bricks", (98, 3): "chiseled_stone_bricks",

        # Slabs
        (44, 0): "stone_slab", (44, 1): "sandstone_slab", (44, 3): "cobblestone_slab",
        (44, 4): "brick_slab", (44, 5): "stone_brick_slab", (44, 6): "nether_brick_slab",
        (44, 7): "quartz_slab", (182, 0): "red_sandstone_slab",

        # Double Slabs
        (43, 0): "double_stone_slab", (43, 1): "double_sandstone_slab",
        (43, 3): "double_cobblestone_slab", (43, 4): "double_brick_slab",
        (43, 5): "double_stone_brick_slab", (43, 6): "double_nether_brick_slab",
        (43, 7): "double_quartz_slab",

        # Stairs
        (53, 0): "oak_stairs", (67, 0): "cobblestone_stairs",
        (108, 0): "brick_stairs", (109, 0): "stone_brick_stairs",
        (114, 0): "nether_brick_stairs", (128, 0): "sandstone_stairs",
        (156, 0): "quartz_stairs", (180, 0): "red_sandstone_stairs",

        # Miscellaneous
        (41, 0): "gold_block", (87, 0): "netherrack", (85, 0): "oak_fence",
        (123, 0): "redstone_lamp"
    }
    
    block_name = block_names.get((block_id, data_value))
    if block_name is None:
        unknown_blocks_set.add((block_id, data_value))
        return f"unknown ({block_id}:{data_value})"
    return block_name

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"❌ File not found: {filename}")
        return None, None, None, None

    print("📂 Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    print(f"✅ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    structured_chunks = {}
    block_count = 0
    file_index = 1

    print("\n🔄 Processing blocks into 16x16 chunks...")

    for chunk_x in range(0, width, MINECRAFT_CHUNK_SIZE):
        for chunk_z in range(0, length, MINECRAFT_CHUNK_SIZE):
            chunk_key = (chunk_x, chunk_z)
            structured_chunks[chunk_key] = []

            for y in range(height):
                for x in range(chunk_x, min(chunk_x + MINECRAFT_CHUNK_SIZE, width)):
                    for z in range(chunk_z, min(chunk_z + MINECRAFT_CHUNK_SIZE, length)):
                        i = y * width * length + z * width + x
                        block_id = int(blocks[i])
                        data_value = int(data_values[i])
                        if block_id != 0:
                            structured_chunks[chunk_key].append(f"{{x={x}, y={y}, z={z}, {get_block_name(block_id, data_value)}}}")
                            block_count += 1

                            if block_count >= MAX_BLOCKS_PER_FILE:
                                with open(f"output
