import nbtlib 
import os
import numpy as np
import time
from collections import defaultdict

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 25000  # Max blocks per Lua file
unknown_blocks_count = defaultdict(int)  # Dictionary to count unknown block occurrences

# Function to map block IDs and data values to names

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        # Basic Blocks
        (0, 0): "air",
        (1, 0): "stone", (1, 1): "granite", (1, 2): "polished_granite",
        (1, 3): "diorite", (1, 4): "polished_diorite", (1, 5): "andesite", (1, 6): "polished_andesite",
        (2, 0): "grass_block", (3, 0): "dirt", (3, 1): "coarse_dirt", (3, 2): "podzol",
        (4, 0): "cobblestone", (12, 0): "sand", (12, 1): "red_sand", (13, 0): "gravel",
        (45, 0): "bricks", (48, 0): "moss_stone", (89, 0): "glowstone",

        # Packed Ice
        (174, 0): "packed_ice",

        # Clay Block
        (82, 0): "clay_block",

        # Sandstone Variants
        (24, 0): "sandstone", (24, 1): "chiseled_sandstone", (24, 2): "smooth_sandstone",
        (44, 1): "sandstone_slab",
        (179, 0): "red_sandstone", (179, 1): "chiseled_red_sandstone", (179, 2): "smooth_red_sandstone",
        (182, 0): "red_sandstone_slab",

        # Sandstone Stairs Variants
        (128, 0): "sandstone_stairs", (128, 1): "smooth_sandstone_stairs", (128, 2): "chiseled_sandstone_stairs",
        (180, 0): "red_sandstone_stairs", (180, 1): "smooth_red_sandstone_stairs", (180, 2): "chiseled_red_sandstone_stairs",

        # Wood Planks
        (5, 0): "oak_planks", (5, 1): "spruce_planks", (5, 2): "birch_planks",
        (5, 3): "jungle_planks", (5, 4): "acacia_planks", (5, 5): "dark_oak_planks",

        # Wood Logs
        (17, 0): "oak_wood", (17, 1): "spruce_wood", (17, 2): "birch_wood", (17, 3): "jungle_wood",

        # Leaves
        (18, 0): "oak_leaves", (18, 3): "jungle_leaves",

        # Wool Colors
        (35, 0): "white_wool", (35, 1): "orange_wool", (35, 2): "magenta_wool",
        (35, 3): "light_blue_wool", (35, 4): "yellow_wool", (35, 5): "lime_wool",
        (35, 6): "pink_wool", (35, 7): "gray_wool", (35, 8): "light_gray_wool",
        (35, 9): "cyan_wool", (35, 10): "purple_wool", (35, 11): "blue_wool",
        (35, 12): "brown_wool", (35, 13): "green_wool", (35, 14): "red_wool", (35, 15): "black_wool",

        # Stone Bricks
        (98, 0): "stone_bricks", (98, 1): "mossy_stone_bricks",
        (98, 2): "cracked_stone_bricks", (98, 3): "chiseled_stone_bricks",

        # Quartz Blocks and Variants
        (155, 0): "quartz_block", (155, 1): "chiseled_quartz_block",
        (155, 2): "pillar_quartz_block", (155, 3): "smooth_quartz_block",
        (44, 7): "quartz_slab", (43, 7): "double_quartz_slab",
        (156, 0): "quartz_stairs",

        # Single Slabs
        (44, 0): "stone_slab", (44, 3): "cobblestone_slab",
        (44, 4): "brick_slab", (44, 5): "stone_brick_slab", (44, 6): "nether_brick_slab",

        # Double Slabs
        (43, 0): "stone_double_slab", (43, 1): "sandstone_double_slab",
        (43, 3): "cobblestone_double_slab", (43, 4): "brick_double_slab",
        (43, 5): "stone_brick_double_slab", (43, 6): "nether_brick_double_slab",
        (181, 0): "red_sandstone_double_slab",

        # Wooden Stairs Variants
        (53, 0): "oak_stairs", (134, 0): "spruce_stairs", (135, 0): "birch_stairs",
        (136, 0): "jungle_stairs", (163, 0): "acacia_stairs", (164, 0): "dark_oak_stairs",

        # Stone Brick Stairs Variants
        (109, 0): "stone_brick_stairs", (109, 1): "mossy_stone_brick_stairs",
        (109, 2): "cracked_stone_brick_stairs", (109, 3): "chiseled_stone_brick_stairs",

        # Other Stairs
        (67, 0): "cobblestone_stairs", (108, 0): "brick_stairs",
        (114, 0): "nether_brick_stairs",

        # Cobblestone Wall Variants
        (139, 0): "cobblestone_wall", (139, 1): "mossy_cobblestone_wall",

        # Redstone & Other
        (41, 0): "gold_block", (87, 0): "netherrack", (85, 0): "oak_fence",
        (123, 0): "redstone_lamp", (152, 0): "redstone_block"
    }
    
    block_name = block_names.get((block_id, data_value))
    if block_name is None:
        unknown_blocks_count[(block_id, data_value)] += 1  # Increment occurrence count
        return f"unknown ({block_id}:{data_value})"
    return block_name

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        return None, None, None, None

    print("üìÇ Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    print(f"‚úÖ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    structured_chunks = {}
    block_count = 0
    file_index = 1
    output_data = []

    print("\nüîÑ Processing blocks into 16x16 chunks...")

    for chunk_x in range(0, width, MINECRAFT_CHUNK_SIZE):
        for chunk_z in range(0, length, MINECRAFT_CHUNK_SIZE):
            chunk_key = (chunk_x, chunk_z)
            structured_chunks[chunk_key] = []

            for y in range(height):
                for x in range(chunk_x, min(chunk_x + MINECRAFT_CHUNK_SIZE, width)):
                    for z in range(chunk_z, min(chunk_z + MINECRAFT_CHUNK_SIZE, length)):
                        i = y * width * length + z * width + x
                        block_id = int(blocks[i])
                        data_value = int(data_values[i])
                        if block_id != 0:
                            formatted_entry = f"{{x={x}, y={y}, z={z}, {get_block_name(block_id, data_value)}}}"
                            structured_chunks[chunk_key].append(formatted_entry)
                            output_data.append(formatted_entry)
                            block_count += 1

                            # If max blocks per file reached, save and reset
                            if block_count >= MAX_BLOCKS_PER_FILE:
                                with open(f"output_{file_index}.lua", "w") as f:
                                    f.write("return {\n" + ",\n".join(output_data) + "\n}")
                                print(f"‚úÖ Saved output_{file_index}.lua with {block_count} blocks")
                                output_data = []
                                block_count = 0
                                file_index += 1

    # Save remaining blocks
    if output_data:
        with open(f"output_{file_index}.lua", "w") as f:
            f.write("return {\n" + ",\n".join(output_data) + "\n}")
        print(f"‚úÖ Saved final output_{file_index}.lua with {len(output_data)} blocks")

    print(f"‚úÖ All blocks sorted into {len(structured_chunks)} chunks.\n")
    return structured_chunks, width, height, length

# Debug and Error Reporting
def print_unknown_blocks():
    if unknown_blocks_count:
        print("\n‚ö†Ô∏è  **Unknown Blocks Encountered** ‚ö†Ô∏è")
        for (block_id, data_value), count in sorted(unknown_blocks_count.items()):
            print(f"  - Unknown Block (ID: {block_id}, Data: {data_value}) occurred {count} times")
    else:
        print("\n‚úÖ No unknown blocks found!")

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    structured_chunks, width, height, length = load_schematic(schematic_file)

    if structured_chunks:
        print("\n‚úÖ Block storage verified. Proceeding to conversion...")
        print_unknown_blocks()
    else:
        print("‚ùå No valid chunks found. Exiting.")

if __name__ == "__main__":
    main()
