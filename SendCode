local modem = peripheral.find("modem")
local monitor = peripheral.find("monitor")

local videoFile = "/video1.nfv"  -- The video file for the first computer

-- Function to load video data from a file
local function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end

    -- Get resolution and fps from the first line
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    local fps = tonumber(videoData[1]:match("%d+ %d+ (%d+)"))
    table.remove(videoData, 1)  -- Remove the first line, which is metadata

    return videoData, resolution, fps
end

-- Function to display the next frame
local function nextFrame(videoData, resolution, fps, frameIndex)
    local frame = {}
    for i = 1, resolution[2] do
        if frameIndex + i > #videoData then
            return false, frameIndex  -- End of video, return false to stop
        end
        table.insert(frame, videoData[frameIndex + i])
    end
    local parsedFrame = paintutils.parseImage(table.concat(frame, "\n"))
    frameIndex = frameIndex + resolution[2]
    paintutils.drawImage(parsedFrame, 1, 1)
    os.sleep(1 / fps)
    return true, frameIndex  -- Continue playing
end

-- Function to play the video file
local function playVideo(videoFile)
    local videoData, resolution, fps = loadVideo(videoFile)
    local frameIndex = 2  -- Start reading video data from the second line (skip metadata)

    while true do
        local success
        success, frameIndex = nextFrame(videoData, resolution, fps, frameIndex)
        
        -- If we reach the end of the video, return to the beginning
        if not success then
            return  -- Exit the loop, signaling the end of the video
        end
    end
end

-- Set up the monitor and redirect the output
monitor.setTextScale(1)
term.redirect(monitor)

-- Open modem on channel 100
modem.open(100)

-- Play the video on this computer
playVideo(videoFile)

-- Send a signal to another computer to start its video after finishing
modem.transmit(100, 1, "start_video")  -- You can modify this to suit your signaling logic
print("Video finished, sent signal to start another video.")

-- Reset terminal once done
term.clear()
term.redirect(term.native())
