import nbtlib
import os
import numpy as np
import time

MINECRAFT_CHUNK_SIZE = 16  # 16x16 chunk size
MAX_BLOCKS_PER_FILE = 25000  # Max blocks per Lua file

# Function to map block IDs and data values to names
def get_block_name(block_id, data_value):
    block_names = {
        (0, 0): "air",
        (1, 0): "stone", (1, 1): "granite", (1, 2): "polished_granite",
        (1, 3): "diorite", (1, 4): "polished_diorite", (1, 5): "andesite", (1, 6): "polished_andesite",
        (2, 0): "grass_block", (3, 0): "dirt", (3, 1): "coarse_dirt", (3, 2): "podzol",
        (4, 0): "cobblestone", (5, 0): "oak_planks", (5, 1): "spruce_planks", (5, 2): "birch_planks",
        (5, 3): "jungle_planks", (5, 4): "acacia_planks", (5, 5): "dark_oak_planks",
        (12, 0): "sand", (12, 1): "red_sand", (13, 0): "gravel",
        (35, 0): "white_wool", (35, 1): "orange_wool", (35, 2): "magenta_wool", (35, 3): "light_blue_wool",
        (35, 4): "yellow_wool", (35, 5): "lime_wool", (35, 6): "pink_wool", (35, 7): "gray_wool",
        (35, 8): "light_gray_wool", (35, 9): "cyan_wool", (35, 10): "purple_wool", (35, 11): "blue_wool",
        (35, 12): "brown_wool", (35, 13): "green_wool", (35, 14): "red_wool", (35, 15): "black_wool",
        (41, 0): "gold_block", (42, 0): "iron_block", (57, 0): "diamond_block", (152, 0): "redstone_block",
        (155, 0): "quartz_block", (155, 1): "chiseled_quartz_block", (155, 2): "pillar_quartz_block",
        (179, 0): "red_sandstone", (179, 1): "chiseled_red_sandstone", (179, 2): "smooth_red_sandstone",
        (251, 0): "white_concrete", (251, 1): "orange_concrete", (251, 2): "magenta_concrete",
        (251, 3): "light_blue_concrete", (251, 4): "yellow_concrete", (251, 5): "lime_concrete",
        (251, 6): "pink_concrete", (251, 7): "gray_concrete", (251, 8): "light_gray_concrete",
        (251, 9): "cyan_concrete", (251, 10): "purple_concrete", (251, 11): "blue_concrete",
        (251, 12): "brown_concrete", (251, 13): "green_concrete", (251, 14): "red_concrete",
        (251, 15): "black_concrete",
        (91, 0): "jack_o_lantern", (89, 0): "glowstone", (56, 0): "diamond_ore",
        (87, 0): "netherrack", (88, 0): "soul_sand", (168, 0): "prismarine", (168, 1): "prismarine_bricks",
        (168, 2): "dark_prismarine", (169, 0): "sea_lantern", (98, 0): "stone_bricks",
        (98, 1): "mossy_stone_bricks", (98, 2): "cracked_stone_bricks", (98, 3): "chiseled_stone_bricks",
        # Stairs
        (53, 0): "oak_stairs", (134, 0): "spruce_stairs", (135, 0): "birch_stairs",
        (136, 0): "jungle_stairs", (163, 0): "acacia_stairs", (164, 0): "dark_oak_stairs",
        (67, 0): "stone_stairs", (108, 0): "brick_stairs", (109, 0): "stone_brick_stairs",
        (114, 0): "nether_brick_stairs", (128, 0): "sandstone_stairs", (180, 0): "red_sandstone_stairs",
        (156, 0): "quartz_stairs", (203, 0): "purpur_stairs"
    }
    return block_names.get((block_id, data_value), f"unknown ({block_id}:{data_value})")

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        return None, None, None, None

    print("üìÇ Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)
    data_values = np.array(schematic_data.get('Data', []), dtype=np.uint8)

    print(f"‚úÖ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    structured_chunks = {}

    print("\nüîÑ Processing blocks into 16x16 chunks...")
    
    # Process blocks chunk by chunk
    for chunk_x in range(0, width, MINECRAFT_CHUNK_SIZE):
        for chunk_z in range(0, length, MINECRAFT_CHUNK_SIZE):
            chunk_key = (chunk_x, chunk_z)
            structured_chunks[chunk_key] = []

            for y in range(height):
                for x in range(chunk_x, min(chunk_x + MINECRAFT_CHUNK_SIZE, width)):
                    for z in range(chunk_z, min(chunk_z + MINECRAFT_CHUNK_SIZE, length)):
                        i = y * width * length + z * width + x
                        block_id = int(blocks[i])
                        data_value = int(data_values[i])
                        if block_id != 0:
                            structured_chunks[chunk_key].append({
                                'x': x,
                                'y': y,
                                'z': z,
                                'block': get_block_name(block_id, data_value)
                            })

    print(f"‚úÖ All blocks sorted into {len(structured_chunks)} chunks.\n")
    return structured_chunks, width, height, length

# Debug: Print first few blocks for verification
def debug_check(structured_chunks):
    print("\nüîç Debug Check: First few stored blocks")
    for chunk, blocks in structured_chunks.items():
        for block in blocks[:5]:
            print(block)
        break

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    structured_chunks, width, height, length = load_schematic(schematic_file)

    if structured_chunks:
        debug_check(structured_chunks)
        print("\n‚úÖ Block storage verified. Proceeding to conversion...")
    else:
        print("‚ùå No valid chunks found. Exiting.")

if __name__ == "__main__":
    main()
