-- Position Tracking
local pos = {x = 0, y = 0, z = 0, dir = 0} -- dir: 0 = +Z, 1 = +X, 2 = -Z, 3 = -X
local lastPos = {x = 0, y = 0, z = 0, dir = 0}

-- Fuel & Material Chest Locations
local fuelChest = {x = -1, y = 0, z = -5}
local materialChests = {
    ["minecraft:white_wool"] = {x = -1, y = 0, z = -4},
    ["minecraft:clay"] = {x = -1, y = 0, z = 0},
    ["minecraft:dirt"] = {x = -1, y = 0, z = -1},
    ["minecraft:grass_block"] = {x = -1, y = 0, z = -2},
    ["minecraft:stone"] = {x = -1, y = 0, z = -3}
}

-- Track Correct Block Names When Restocking
local stockedBlocks = {}

-- Valid Blocks
local validBlocks = {
    ["minecraft:white_wool"] = true,
    ["minecraft:clay"] = true,
    ["minecraft:dirt"] = true,
    ["minecraft:grass_block"] = true,
    ["minecraft:stone"] = true
}

-- **Only Allowed Fuel Source**
local fuelItem = "projecte:aeternus_fuel_block" -- Aeternus Fuel Block

-- Forward Declare All Functions
local fixBlockData, savePosition, returnToLastPosition
local turnLeft, turnRight, moveForward, moveTo
local restock, refuelTurtle, placeBlock, buildSchematic

-- Function to Convert Incorrect Block Data
fixBlockData = function(rawBlocks)
    local correctedBlocks = {}
    for _, blockData in ipairs(rawBlocks) do
        local blockName = blockData[1] or blockData.block
        table.insert(correctedBlocks, {
            x = blockData.x,
            y = blockData.y,
            z = blockData.z,
            block = "minecraft:" .. blockName
        })
    end
    return correctedBlocks
end

-- Position Saving & Returning
savePosition = function()
    lastPos.x, lastPos.y, lastPos.z, lastPos.dir = pos.x, pos.y, pos.z, pos.dir
end

returnToLastPosition = function()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- Movement Functions
turnLeft = function() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
turnRight = function() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

moveForward = function()
    if turtle.forward() then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
    end
end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end end
        moveForward()
    end
    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end end
        moveForward()
    end
end

-- ‚úÖ **Improved Aeternus Fuel Refueling (Takes 2 Blocks)**
refuelTurtle = function()
    if turtle.getFuelLevel() >= 1000 then return true end -- No need to refuel

    print("‚õΩ Low fuel detected! Moving to refuel.")
    savePosition()
    moveTo(fuelChest)
    while pos.dir ~= 3 do turnLeft() end

    local refueled = false

    -- Try to suck **two** Aeternus Fuel Blocks
    for i = 1, 3 do  -- Try up to 3 times if fuel is available
        local fuelCount = 0
        for _ = 1, 2 do -- Attempt to get 2 fuel blocks
            if turtle.suck(1) then
                local item = turtle.getItemDetail()
                if item and item.name == fuelItem then
                    print("‚úÖ Got Aeternus Fuel Block, refueling...")
                    turtle.refuel()
                    fuelCount = fuelCount + 1
                else
                    print("‚ùå Wrong item received, returning it!")
                    turtle.drop() -- Drop non-fuel items back into the chest
                end
            end
        end

        if fuelCount == 2 then
            refueled = true
            break
        end
    end

    if refueled then
        print("‚úÖ Successfully refueled with 2 Aeternus Fuel Blocks!")
    else
        print("‚ùå No Aeternus Fuel Block found after 3 tries! Build halted.")
        return false
    end

    returnToLastPosition()
    return true
end

-- ‚úÖ **Block Placement Function**
placeBlock = function(block)
    if turtle.getFuelLevel() < 1000 then
        if not refuelTurtle() then return false end
    end

    local actualBlock = stockedBlocks[block] or "minecraft:" .. block

    -- Check if there's already a block below
    if turtle.detectDown() then
        local success, data = turtle.inspectDown()
        if success and data.name == actualBlock then
            print("‚ö†Ô∏è Block already present, skipping placement.")
            return true
        end
    end

    -- Find and select the correct slot
    local blockFound = false
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == actualBlock then
            turtle.select(i)
            blockFound = true
            break
        end
    end

    if not blockFound then
        print("‚ùå Block not found in inventory: " .. actualBlock)
        print("üîÑ Attempting to restock...")
        if restock(block) then
            return placeBlock(block) -- Retry placement after restock
        else
            print("‚ùå Out of " .. block .. ". Skipping placement.")
            return false
        end
    end

    -- Attempt to place the block
    local placed = turtle.placeDown()
    if not placed then
        print("‚ö†Ô∏è First placement attempt failed. Retrying...")
        sleep(0.5)
        placed = turtle.placeDown()
    end

    if placed then
        print("‚úÖ Successfully placed " .. actualBlock .. " at correct location.")
        return true
    else
        print("‚ùå Unable to place " .. actualBlock .. " after retry.")
        return false
    end
end

-- Build Function
buildSchematic = function(blocks)
    local fixedBlocks = fixBlockData(blocks)

    for _, blockData in ipairs(fixedBlocks) do
        moveTo(blockData)
        if validBlocks[blockData.block] then
            if not placeBlock(blockData.block) then
                print("‚ö†Ô∏è Skipping block at X:" .. blockData.x .. ", Z:" .. blockData.z)
            end
        end
    end
    print("‚úÖ Build completed successfully!")
end
