-- URL where the schematic is hosted
local SCHEMATIC_URL = "http://example.com/schematic_chunks"
local CHUNK_SIZE = 96000  -- Process 96,000 blocks at a time
local TEMP_FILE = "temp_chunk.lua"  -- Temporary file to store each chunk

-- Stack Limits (Customize as needed)
local stackLimits = {
    dirt = 4,   -- Carry up to 4 stacks of dirt
    wool = 2,   -- Carry up to 2 stacks of wool
    grass = 1   -- Carry 1 stack of grass
}

-- Position Tracking
local pos = {x = 0, y = 0, z = 0, dir = 0} -- dir: 0 = +Z, 1 = +X, 2 = -Z, 3 = -X
local lastPos = {x = 0, y = 0, z = 0, dir = 0}

-- Material Chest Location (Relative to Start)
local materialChest = {x = -1, y = 0, z = 0} -- 1 block to the left of start

-- Functions for movement
local function turnLeft()
    turtle.turnLeft()
    pos.dir = (pos.dir - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    pos.dir = (pos.dir + 1) % 4
end

local function moveForward()
    while not turtle.forward() do
        if turtle.detect() then
            turtle.attack()
        else
            turtle.dig()
        end
    end
    if pos.dir == 0 then pos.z = pos.z + 1
    elseif pos.dir == 1 then pos.x = pos.x + 1
    elseif pos.dir == 2 then pos.z = pos.z - 1
    elseif pos.dir == 3 then pos.x = pos.x - 1
    end
end

local function moveTo(target)
    while pos.x ~= target.x do
        if pos.x < target.x then
            while pos.dir ~= 1 do turnRight() end
        else
            while pos.dir ~= 3 do turnRight() end
        end
        moveForward()
    end
    
    while pos.z ~= target.z do
        if pos.z < target.z then
            while pos.dir ~= 0 do turnRight() end
        else
            while pos.dir ~= 2 do turnRight() end
        end
        moveForward()
    end
end

local function savePosition()
    lastPos.x = pos.x
    lastPos.y = pos.y
    lastPos.z = pos.z
    lastPos.dir = pos.dir
end

local function returnToLastPosition()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- Count current stacks of an item
local function countItemStacks(block)
    local count = 0
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:"..block then
            count = count + 1
        end
    end
    return count
end

-- Restock Function
local function restock(block)
    print("Restocking: "..block)
    savePosition()
    moveTo(materialChest)
    while pos.dir ~= 3 do turnLeft() end -- Face the chest

    local maxStacks = stackLimits[block] or 1
    local currentStacks = countItemStacks(block)
    local neededStacks = maxStacks - currentStacks
    
    for chestSlot = 1, neededStacks do
        for i = 1, 27 do -- Cycle through chest slots
            turtle.select(chestSlot)
            if turtle.suck(64) then
                local suckedItem = turtle.getItemDetail()
                if suckedItem and suckedItem.name == "minecraft:"..block then
                    print("Restocked "..block)
                else
                    turtle.drop() -- Drop unwanted items back into chest
                end
            end
        end
    end
    
    returnToLastPosition()
end

-- Place Block Function (Restocks if Completely Out)
local function placeBlock(block)
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:"..block then
            turtle.select(i)
            turtle.placeDown()
            return true
        end
    end
    
    -- If out of block, restock
    if restock(block) then
        return placeBlock(block)
    else
        print("Build halted: Out of "..block)
        return false
    end
end

-- Function to fetch a chunk of 96,000 blocks from the server
local function fetch_schematic_chunk(chunk_index)
    local url = SCHEMATIC_URL .. "?chunk=" .. chunk_index
    print("Requesting chunk: " .. chunk_index)

    local response = http.get(url)
    if response then
        local data = response.readAll()
        response.close()

        if data and data ~= "" then
            -- Save chunk to a temporary file
            local file = fs.open(TEMP_FILE, "w")
            file.write(data)
            file.close()
            return true
        end
    end
    print("Failed to fetch or empty chunk " .. chunk_index)
    return false
end

-- Function to load and process a schematic chunk
local function load_and_process_chunk()
    if not fs.exists(TEMP_FILE) then return nil end

    -- Load chunk data
    local chunk_data = dofile(TEMP_FILE)
    fs.delete(TEMP_FILE)  -- Delete after loading to free memory
    return chunk_data
end

-- Function to build from streamed schematic chunks
local function buildSchematic()
    local chunk_index = 0
    while true do
        -- Fetch and process chunk
        if not fetch_schematic_chunk(chunk_index) then
            print("No more chunks available, ending build.")
            break
        end

        -- Process the chunk
        local block_data = load_and_process_chunk()
        if not block_data or #block_data == 0 then
            print("Chunk is empty, moving to next.")
            break
        end

        for _, block in ipairs(block_data) do
            moveTo(block.x, block.y, block.z)
            placeBlock(block.block)
        end

        print("Chunk " .. chunk_index .. " completed!")
        chunk_index = chunk_index + 1
    end
    print("Schematic build complete!")
end

-- Start building
buildSchematic()
