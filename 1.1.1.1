-- Position Tracking
local pos = {x = 0, y = 0, z = 0, dir = 0} -- dir: 0 = +Z, 1 = +X, 2 = -Z, 3 = -X
local lastPos = {x = 0, y = 0, z = 0, dir = 0}

-- Fuel & Material Chest Locations
local fuelChest = {x = -1, y = 0, z = -5}
local materialChests = {
    ["minecraft:white_wool"] = {x = -1, y = 0, z = -4},
    ["minecraft:clay"] = {x = -1, y = 0, z = 0},
    ["minecraft:dirt"] = {x = -1, y = 0, z = -1},
    ["minecraft:grass_block"] = {x = -1, y = 0, z = -2},
    ["minecraft:stone"] = {x = -1, y = 0, z = -3}
}

-- Track Correct Block Names When Restocking
local stockedBlocks = {}

-- Valid Blocks
local validBlocks = {
    ["minecraft:white_wool"] = true,
    ["minecraft:clay"] = true,
    ["minecraft:dirt"] = true,
    ["minecraft:grass_block"] = true,
    ["minecraft:stone"] = true
}

-- **Only Allowed Fuel Source**
local fuelItem = "projecte:aeternus_fuel_block" -- Aeternus Fuel Block

-- Store Blocks to be Built
local blocks = {
    {x=0, y=0, z=0, block="minecraft:white_wool"},
    {x=1, y=0, z=0, block="minecraft:clay"},
    {x=2, y=0, z=0, block="minecraft:dirt"},
    {x=3, y=0, z=0, block="minecraft:grass_block"},
    {x=4, y=0, z=0, block="minecraft:stone"},
    {x=5, y=0, z=0, block="minecraft:white_wool"},
    {x=6, y=0, z=0, block="minecraft:clay"},
    {x=7, y=0, z=0, block="minecraft:dirt"}
}

-- Forward Declare All Functions
local fixBlockData, savePosition, returnToLastPosition
local turnLeft, turnRight, moveForward, moveTo
local restock, refuelTurtle, placeBlock, buildSchematic

-- Function to Convert Incorrect Block Data
fixBlockData = function(rawBlocks)
    local correctedBlocks = {}
    for _, blockData in ipairs(rawBlocks) do
        local blockName = blockData[1] or blockData.block
        table.insert(correctedBlocks, {
            x = blockData.x,
            y = blockData.y,
            z = blockData.z,
            block = "minecraft:" .. blockName
        })
    end
    return correctedBlocks
end

-- Position Saving & Returning
savePosition = function()
    lastPos.x, lastPos.y, lastPos.z, lastPos.dir = pos.x, pos.y, pos.z, pos.dir
end

returnToLastPosition = function()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- Movement Functions
turnLeft = function() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
turnRight = function() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

moveForward = function()
    if turtle.forward() then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
    end
end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end end
        moveForward()
    end
    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end end
        moveForward()
    end
end

-- ‚úÖ **Refuels Twice with Aeternus Fuel Blocks**
refuelTurtle = function()
    if turtle.getFuelLevel() >= 1000 then return true end -- No need to refuel

    print("‚õΩ Low fuel detected! Moving to refuel.")
    savePosition()
    moveTo(fuelChest)
    while pos.dir ~= 3 do turnLeft() end

    local fuelCount = 0

    for _ = 1, 3 do  -- Try up to 3 times
        for _ = 1, 2 do -- Grab 2 fuel blocks
            if turtle.suck(1) then
                local item = turtle.getItemDetail()
                if item and item.name == fuelItem then
                    print("üî• Using Aeternus Fuel Block to refuel.")
                    turtle.refuel()
                    fuelCount = fuelCount + 1
                else
                    print("‚ùå Wrong item received, returning it!")
                    turtle.drop() -- Drop non-fuel items
                end
            end
        end

        if fuelCount == 2 then
            print("‚úÖ Successfully refueled with 2 Aeternus Fuel Blocks!")
            break
        end
    end

    returnToLastPosition()
    return fuelCount == 2
end

-- ‚úÖ **Fixed Restocking Function**
restock = function(block)
    local chestPos = materialChests[block]
    if not chestPos then 
        print("‚ùå No chest found for block: " .. block)
        return false 
    end

    savePosition()
    moveTo(chestPos)
    while pos.dir ~= 3 do turnLeft() end

    local correctBlockName = nil

    for _ = 1, 3 do -- Try up to 3 times
        if turtle.suck(64) then
            local item = turtle.getItemDetail()
            if item and item.name == "minecraft:" .. block then
                correctBlockName = item.name
                print("‚úÖ Correctly restocked " .. correctBlockName)
                stockedBlocks[block] = correctBlockName -- ‚úÖ Store correct block name
                break
            else
                print("‚ùå Wrong item sucked, returning it!")
                turtle.drop()
            end
        end
    end

    returnToLastPosition()
    return correctBlockName ~= nil
end

-- ‚úÖ **Building Function**
buildSchematic = function()
    local fixedBlocks = fixBlockData(blocks)

    for _, blockData in ipairs(fixedBlocks) do
        moveTo(blockData)
        if validBlocks[blockData.block] then
            if not placeBlock(blockData.block) then
                print("‚ö†Ô∏è Skipping block at X:" .. blockData.x .. ", Z:" .. blockData.z)
            end
        end
    end
    print("‚úÖ Build completed successfully!")
end

-- ‚úÖ **Run the Build Process**
buildSchematic()
