-- Function to get the current position using GPS
function get_current_position()
    local x, y, z = gps.locate() -- Get current turtle position using GPS
    if x and y and z then
        print("Current Position: X=" .. x .. " Y=" .. y .. " Z=" .. z)
        return x, y, z
    else
        print("GPS not available!")
        return 0, 0, 0 -- Default to (0, 0, 0) if GPS is not available
    end
end

-- Function to move the turtle to the correct coordinates
function move_to_position(x, y, z, offset_x, offset_y, offset_z)
    -- Apply the offsets based on the turtle's current position
    local target_x = offset_x + x
    local target_y = offset_y + y
    local target_z = offset_z + z
    
    local current_x, current_y, current_z = gps.locate() -- Get current turtle position using GPS
    
    -- Move to x
    while current_x < target_x do
        turtle.forward()
        current_x = current_x + 1
    end
    while current_x > target_x do
        turtle.back()
        current_x = current_x - 1
    end

    -- Move to y
    while current_y < target_y do
        turtle.up()
        current_y = current_y + 1
    end
    while current_y > target_y do
        turtle.down()
        current_y = current_y - 1
    end

    -- Move to z
    while current_z < target_z do
        turtle.forward()
        current_z = current_z + 1
    end
    while current_z > target_z do
        turtle.back()
        current_z = current_z - 1
    end
end

-- Function to load the schematic from a file
function load_schematic(filename)
    local schematic = {}
    
    -- Open the file containing the schematic data
    local file = fs.open(filename, "r")
    if not file then
        print("Error: Could not open file " .. filename)
        return nil
    end
    
    -- Read the file content
    local content = file.readAll()
    file.close()
    
    -- Run the content of the file (assuming it's a Lua table)
    local success, result = pcall(loadstring(content))
    if success then
        print("Schematic loaded successfully.")
        -- Ensure that 'Short' values are removed or replaced with normal numbers
        for i, block in ipairs(result) do
            block.x = tonumber(block.x) or block.x
            block.y = tonumber(block.y) or block.y
            block.z = tonumber(block.z) or block.z
        end
        return result
    else
        print("Error loading schematic: " .. result)
        return nil
    end
end

-- Function to build the schematic relative to the current position
function build_schematic(schematic)
    -- Get the turtle's current position
    local current_x, current_y, current_z = get_current_position()
    
    -- Iterate through the blocks in the schematic
    for _, block in ipairs(schematic) do
        -- Move the turtle to the correct relative coordinates
        move_to_position(current_x, current_y, current_z, block.x, block.y, block.z)
        
        -- Select the block in the inventory
        -- Assuming the turtle has the correct blocks in its inventory and can select the correct one
        turtle.select(1) -- Select the first slot (you can adjust this depending on block types)
        
        -- Place the block at the current position
        turtle.placeDown()
    end
end

-- Main function to load and build the schematic
function main()
    -- Load the schematic from the file "schem"
    local schematic = load_schematic("schem")
    
    if schematic then
        -- Start building the schematic relative to the turtle's current position
        build_schematic(schematic)
    end
end

-- Run the main function
main()
