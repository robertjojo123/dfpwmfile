-- Schematic Data
local schematic = {
    width = 2,
    height = 1,
    length = 6,
    {x = 0, y = 0, z = 0, block = 'dirt'},
    {x = 0, y = 0, z = 1, block = 'dirt'},
    {x = 0, y = 0, z = 2, block = 'grass'},
    {x = 0, y = 0, z = 3, block = 'dirt'},
    {x = 0, y = 0, z = 4, block = 'dirt'},
    {x = 0, y = 0, z = 5, block = 'dirt'},
    {x = 1, y = 0, z = 0, block = 'dirt'},
    {x = 1, y = 0, z = 1, block = 'dirt'},
    {x = 1, y = 0, z = 2, block = 'dirt'},
    {x = 1, y = 0, z = 3, block = 'dirt'},
    {x = 1, y = 0, z = 4, block = 'dirt'},
    {x = 1, y = 0, z = 5, block = 'dirt'}
}

-- Position Tracking
local pos = {x = 0, y = 0, z = 0, dir = 0} -- dir: 0 = +Z, 1 = +X, 2 = -Z, 3 = -X

-- Functions for movement
local function turnLeft()
    turtle.turnLeft()
    pos.dir = (pos.dir - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    pos.dir = (pos.dir + 1) % 4
end

local function tryMove(moveFunc, detectFunc, attackFunc, upAndOver)
    while not moveFunc() do
        if detectFunc() then
            attackFunc()
        else
            if upAndOver then
                if turtle.up() then
                    pos.y = pos.y + 1
                    if moveFunc() then
                        if turtle.down() then
                            pos.y = pos.y - 1
                        end
                    end
                else
                    turnLeft()
                    turnLeft()
                    if moveFunc() then
                        turnLeft()
                        turnLeft()
                    else
                        turnRight()
                        if moveFunc() then
                            turnLeft()
                        else
                            turnLeft()
                            if moveFunc() then
                                turnRight()
                            else
                                print("Stuck! Cannot navigate obstacle.")
                                return false
                            end
                        end
                    end
                end
            end
        end
    end
    return true
end

local function moveForward()
    if tryMove(turtle.forward, turtle.detect, turtle.attack, true) then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
    end
end

local function moveUp()
    if tryMove(turtle.up, turtle.detectUp, turtle.attackUp, false) then
        pos.y = pos.y + 1
    end
end

local function moveDown()
    if tryMove(turtle.down, turtle.detectDown, turtle.attackDown, false) then
        pos.y = pos.y - 1
    end
end

local function moveTo(target)
    while pos.y < target.y do moveUp() end
    while pos.y > target.y do moveDown() end
    
    while pos.x ~= target.x do
        if pos.x < target.x then
            while pos.dir ~= 1 do turnRight() end
        else
            while pos.dir ~= 3 do turnRight() end
        end
        moveForward()
    end
    
    while pos.z ~= target.z do
        if pos.z < target.z then
            while pos.dir ~= 0 do turnRight() end
        else
            while pos.dir ~= 2 do turnRight() end
        end
        moveForward()
    end
end

local function placeBlock(block)
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:"..block then
            turtle.select(i)
            turtle.placeDown()
            return true
        end
    end
    print("Out of block: "..block)
    return false
end

local function buildSchematic()
    for _, blockData in ipairs(schematic) do
        local target = {x = blockData.x, y = blockData.y, z = blockData.z}
        moveTo(target)
        placeBlock(blockData.block)
    end
    print("Schematic completed.")
end

buildSchematic()
