import nbtlib
import os
import numpy as np
import psutil
import time

MEMORY_LIMIT_MB = 2048
CHUNK_SIZE = 25000  # Max blocks per Lua file

# Function to map block IDs to names
def get_block_name(block_id):
    block_names = {
        1: "stone", 2: "grass", 3: "dirt", 4: "cobblestone",
        5: "planks", 6: "sapling", 7: "bedrock", 8: "water",
        9: "lava", 10: "sand", 11: "gravel", 12: "gold_ore",
        13: "iron_ore", 14: "coal_ore", 15: "wood", 16: "leaves",
        17: "wooden_planks", 18: "wool", 19: "saplings", 20: "wooden_door",
        21: "beacon", 22: "black_wool", 23: "block_of_gold", 24: "block_of_quartz",
        25: "block_of_redstone", 26: "allium", 27: "azure_bluet", 28: "blue_orchid",
        29: "bricks", 30: "brick_slab", 31: "chiseled_quartz_block", 32: "chiseled_sandstone",
        33: "chiseled_stone_bricks", 34: "clay", 35: "cobblestone", 36: "cobblestone_stairs",
        37: "cobblestone_wall", 38: "dandelion", 39: "dirt", 40: "double_tallgrass",
        41: "fern", 42: "glowstone", 43: "granite", 44: "grass (plant)", 45: "grass_block",
        46: "gravel", 47: "jungle_leaves", 48: "large_fern", 49: "lever", 50: "light_gray_wool",
        51: "lilac", 52: "lily_pad", 53: "moss_stone", 54: "mossy_stone_bricks", 55: "netherrack",
        56: "oak_fence", 57: "oak_leaves", 58: "oak_wood", 59: "oak_wood_planks", 60: "orange_tulip",
        61: "oxeye_daisy", 62: "packed_ice", 63: "peony", 64: "pillar_quartz_block", 65: "pink_tulip",
        66: "poppy", 67: "quartz_slab", 68: "quartz_stairs", 69: "red_tulip", 70: "redstone_lamp",
        71: "rose_bush", 72: "sand", 73: "sandstone", 74: "sandstone_slab", 75: "sandstone_stairs",
        76: "smooth_sandstone", 77: "snow (layer)", 78: "snow (block)", 79: "spruce_wood_planks",
        80: "spruce_wood_slab", 81: "spruce_wood_stairs", 82: "stone", 83: "stone_brick_stairs",
        84: "stone_bricks", 85: "stone_brick_slab", 86: "sunflower", 87: "vines", 88: "water",
        89: "water_bucket", 90: "white_tulip", 91: "white_wool"
    }
    return block_names.get(block_id, f"unknown ({block_id})")

# Load schematic and process block data
def load_schematic(filename):
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        return None, None, None, None

    print("üìÇ Loading schematic file...")
    start_time = time.time()

    schematic_data = nbtlib.load(filename)
    width, height, length = int(schematic_data['Width']), int(schematic_data['Height']), int(schematic_data['Length'])
    blocks = np.array(schematic_data.get('Blocks', []), dtype=np.uint8)

    print(f"‚úÖ Schematic loaded in {time.time() - start_time:.2f} seconds.")

    total_blocks = width * height * length
    structured_blocks = []

    print("\nüîÑ Processing blocks (vertical stacking)...")

    # Process blocks in **vertical column order** for better chunk loading
    for x in range(width):
        for z in range(length):
            for y in range(height):  # Now **prioritizing vertical stacking**
                i = y * width * length + z * width + x  # Convert (x, y, z) to 1D index
                if blocks[i] != 0:  # Skip air blocks
                    structured_blocks.append({
                        'x': x,
                        'y': y,
                        'z': z,
                        'block': get_block_name(int(blocks[i]))
                    })

    print(f"‚úÖ All {len(structured_blocks)} non-air blocks processed in {time.time() - start_time:.2f} seconds.\n")
    return structured_blocks, width, height, length

# Convert to Lua format (Splitting into 25,000 block chunks)
def convert_to_lua(blocks, width, height, length):
    print("üìù Converting to Lua format...")

    lua_files = []
    num_chunks = (len(blocks) // CHUNK_SIZE) + 1
    start_time = time.time()

    for chunk_index in range(num_chunks):
        chunk_start = chunk_index * CHUNK_SIZE
        chunk_end = min(chunk_start + CHUNK_SIZE, len(blocks))
        chunk = blocks[chunk_start:chunk_end]

        lua_table = f"local schematic = {{\n    width = {width},\n    height = {height},\n    length = {length},\n"
        lua_table += ",\n".join(
            f"    {{x = {block['x']}, y = {block['y']}, z = {block['z']}, block = '{block['block']}' }}"
            for block in chunk
        )
        lua_table += "\n}\n"

        filename = f"schematic_{chunk_index + 1}.lua"
        lua_files.append((filename, lua_table))

        print(f"   üîÑ Chunk {chunk_index + 1}/{num_chunks} converted ({chunk_end}/{len(blocks)} blocks)...")

    print(f"‚úÖ Lua conversion completed in {time.time() - start_time:.2f} seconds.\n")
    return lua_files

# Save Lua files
def save_lua_files(lua_files):
    print("üíæ Saving Lua files...")
    start_time = time.time()

    for filename, lua_code in lua_files:
        with open(filename, 'w') as file:
            file.write(lua_code)
        print(f"‚úÖ Saved {filename}")

    print(f"‚úÖ All files saved in {time.time() - start_time:.2f} seconds.")

# Main function
def main():
    schematic_file = input("Enter schematic file path: ").strip()
    blocks, width, height, length = load_schematic(schematic_file)

    if blocks:
        lua_files = convert_to_lua(blocks, width, height, length)
        save_lua_files(lua_files)
    else:
        print("‚ùå No valid blocks found. Exiting.")

if __name__ == "__main__":
    main()
